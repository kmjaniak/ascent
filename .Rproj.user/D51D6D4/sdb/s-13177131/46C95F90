{
    "collab_server" : "",
    "contents" : "library(dplyr)\nlibrary(roxygen2)\n\n\n\n#' Clean Ascent CSV\n#'\n#' Reads Ascent csv, generates a data frame that is easy to manipulate.\n#' @param batch_names List of batch names\n#' @keywords ascent\n#' @export\n#' @examples\n#' clean_ascent_csv(batch_names, posix = TRUE)\n\n\nclean_ascent_csv <- function(batch_names, inst = TRUE, stream = TRUE,\n                             posix = TRUE) {\n\n\n  #create a list of file paths from the batch names(csvs are stored in \"data\" folder)\n\n  batch_paths <- lapply(batch_names,\n                        function(x) paste(\"data/\", x, \"_alere_results.csv\", sep = \"\"))\n\n\n  #Read in all the .csv files to \"data\" (creates a list of data frames for eachInstrument)\n\n  data <- lapply(batch_paths, read.csv, stringsAsFactors = FALSE)\n\n  #Combine the individual data frames into one data frame\n\n  data <- do.call(\"rbind\", data)\n\n  data <- data %>%\n    select(Batch,\n           Index,\n           Sample = Sample.Name,\n           Type,\n           Nominal = Nominal.Conc.,\n           Analyte = Compound,\n           Response,\n           Conc = Calc..Conc.,\n           ISQuant = Chrom.1.Name,\n           Area = Chrom.1.Area,\n           AcqTime = Acquisition.Time)\n\n  data$Type <- factor(data$Type, levels = c(\"Standard\", \"Blank\", \"QC\", \"Unknown\"))\n  data$Batch <- as.factor(data$Batch)\n  data$Analyte <- as.factor(data$Analyte)\n  data$ISQuant <- as.factor(data$ISQuant)\n\n  data$AcqTime <- gsub(\"T\", \" \", data$AcqTime)\n  data$AcqTime <- trimws(gsub(\"\\\\.000Z\", \"\", data$AcqTime))\n  if(posix) {data$AcqTime <- as.POSIXct(data$AcqTime)}\n\n  if(stream){\n    data <- data %>%\n      mutate(Stream = ifelse(grepl(\"_A_\", Batch), \"Stream 1\",\n                             ifelse(grepl(\"_B_\", Batch), \"Stream 2\", \"Stream Unknown\")))\n\n    data$Stream <- as.factor(data$Stream)\n  }\n  if(inst) {\n      instruments <- c(\"McCartney\", \"Hendrix\", \"Cash\", \"Janis\",\n                       \"Willie\", \"Freddie\", \"Harrison\", \"Lennon\",\n                       \"Bono\", \"Ringo\", \"Corgan\",\n                       \"Jagger\", \"Morrison\", \"Axl\",\n                       \"Jones,\", \"Casablancas\", \"Jett\", \"Dylan\",\n                       \"Page\", \"Plant\", \"Berry\", \"Prince\")\n\n      lapply(instruments, function(x) {\n\n        matched_rows <- grep(x, data$Batch, ignore.case = TRUE)\n        data[matched_rows, \"Instrument\"] <<- x\n\n      })\n\n      data$Instrument <- as.factor(data$Instrument)\n    }\n  data\n\n}\n\n\n#' Read Ascent CSVs\n#'\n#' This function reads one or more Ascent csv files into a single data frame.\n#' @param batch_names List of batch names.\n#' @keywords ascent\n#' @export\n#' @examples\n#' read_ascent_csv()\n#'\nlibrary(dplyr)\n\n\nread_ascent_csv <- function(batch_names)  {\n  #create a list of file paths from the batch names(csvs are stored in \"data\" folder)\n\n  batch_paths <- lapply(batch_names,\n                        function(x) paste(\"data/\", x, \"_alere_results.csv\", sep = \"\"))\n\n\n  #Read in all the .csv files to \"data\" (creates a list of data frames for eachInstrument)\n\n  data <- lapply(batch_paths, read.csv, stringsAsFactors = FALSE)\n\n  #Combine the individual data frames into one data frame\n\n  do.call(\"rbind\", data)\n\n}\n\n#' Clean Ascent Columns\n#'\n#' This function takes a data frame generated from Ascent csv files and\n#' selects only the relevant columns, and renames the columns so that they\n#' are easier to access. Removes extraneous characters from the \"Time\" column.\n#' Coerces various columns to factors.\n#' @param data Data frame of Ascent data generated from read_ascent_csv()\n#' with all columns present and column names unmodified.\n#' @param posix Optionally converts AcqTime to POSIXct. Default is FALSE.\n#' @keywords ascent\n#' @export\n#' @examples\n#' clean_ascent_cols()\n\nclean_ascent_cols <- function(data, posix = FALSE) {\n  data <- data %>%\n    select(Batch,\n           Index,\n           Sample = Sample.Name,\n           Type,\n           Nominal = Nominal.Conc.,\n           Analyte = Compound,\n           Response,\n           Conc = Calc..Conc.,\n           ISQuant = Chrom.1.Name,\n           Area = Chrom.1.Area,\n           AcqTime = Acquisition.Time)\n\n  data$Type <- factor(data$Type, levels = c(\"Standard\", \"Blank\", \"QC\", \"Unknown\"))\n  data$Batch <- as.factor(data$Batch)\n  data$Analyte <- as.factor(data$Analyte)\n  data$ISQuant <- as.factor(data$ISQuant)\n\n  data$AcqTime <- gsub(\"T\", \" \", data$AcqTime)\n  data$AcqTime <- trimws(gsub(\"\\\\.000Z\", \"\", data$AcqTime))\n  if(posix) {data$AcqTime <- as.POSIXct(data$AcqTime)}\n\n  data\n}\n\nremove_standards <- function(data) {\n  data %>%\n    filter(!Type == \"Standard\")\n}\n\n#' Add Stream Column\n#'\n#' This function adds a \"Stream\" column to an existing Ascent data frame.\n#' This column is a factor with two levels, \"Stream 1\" and \"Stream 2\".\n#' \"Stream 1\" is assigned if the batch name contains \"_A_\", and \"Stream 2\"\n#' is assigned if the batch name contains \"_B_\".\n#' @param data Data frame of Ascent data, generated from read_ascent_csv()\n#' @keywords ascent\n#' @export\n#' @examples\n#' add_stream_col(data)\n\n\nadd_stream_col <- function(data) {\n\n  data <- data %>%\n    mutate(Stream = ifelse(grepl(\"_A_\", Batch), \"Stream 1\",\n                           ifelse(grepl(\"_B_\", Batch), \"Stream 2\", \"Stream Unknown\")))\n\n  data$Stream <- as.factor(data$Stream)\n\n  data\n}\n\n#' Add Instrument Column\n#'\n#' Adds an \"Instrument\" column to a data frame resulting from read_ascent_csv().\n#' @param data Data frame of Ascent data, generated from read_ascent_csv()\n#' @keywords ascent\n#' @details Creates a new column called \"Instrument\" which contains\n#' a match found between \"Batch\" and a pre-defined list of instruments.\n#' @export\n#' @examples\n#' add_inst_col(data)\n\n\nadd_inst_col <- function(data) {\n\n  instruments <- c(\"McCartney\", \"Hendrix\", \"Cash\", \"Janis\",\n                  \"Willie\", \"Freddie\", \"Harrison\", \"Lennon\",\n                  \"Bono\", \"Ringo\", \"Corgan\",\n                  \"Jagger\", \"Morrison\", \"Axl\",\n                  \"Jones,\", \"Casablancas\", \"Jett\", \"Dylan\",\n                  \"Page\", \"Plant\", \"Berry\", \"Prince\")\n\n  lapply(instruments, function(x) {\n\n    matched_rows <- grep(x, data$Batch)\n    data[matched_rows, \"Instrument\"] <<- x\n\n  })\n\n  # data <- data %>%\n  #   mutate(Instrument = word(as.character(Batch), -1, sep = \"_\"))\n\n  data$Instrument <- as.factor(data$Instrument)\n\n  data\n\n}\n\n\n#' Plot Internal Standard\n#'\n#' Generates a plot of IS peak area vs acquisition time.\n#' @param data Data frame of Ascent data, generated from read_ascent_csv(), cleaned with\n#' clean_ascent_cols(posix = TRUE)\n#' @keywords ascent\n#' @export\n#' @examples\n#' plot_IS(data)\n\n\nplot_IS <- function(data) {\n  data %>%\n    filter(ISQuant == \"IS\") %>%\n    ggplot(aes(x = AcqTime, y = Area)) +\n    geom_point(aes(col = Type)) +\n    theme(axis.text.x = element_blank()) +\n    labs(x = \"Acquisition Time\", y = \"IS Peak Area\") +\n    facet_wrap(~Analyte)\n}\n\n#' Identify Outliers\n#'\n#' Updates the \"Include\" column of an Ascent data frame with FALSE if the point is an outlier\n#' Points are marked as outliers if they are less than Q1 - 1.5 * IQR or greater than Q3 + 1.5*IQR\n#' @param data Data frame processed by clean_ascent_csv()\n#' @keywords ascent\n#' @export\n#' @examples\n#' evaluate_outliers(data)\n\nevaluate_outliers <- function(data) {\n  data <- data %>%\n    group_by(Analyte, Sample) %>%\n    mutate(Q1 = quantile(Conc, 0.25),\n           Q3 = quantile(Conc, 0.75),\n           IQR = IQR(Conc),\n           min_out = Q1 - 1.5*IQR,\n           max_out = Q3 + 1.5*IQR) %>%\n    ungroup()\n\n  data$Outlier <- ifelse(data$Conc < data$min_out | data$Conc > data$max_out, TRUE, FALSE)\n\n  data <- data %>%\n    select(-c(Q1, Q3, IQR, min_out, max_out))\n\n  return(data)\n}\n\n#' Create Summary Table of QC Verification Data\n#'\n#' Creates a summary table including Mean, SD, %CV, %Dev from Target, and n for each QC level for each analyte.\n#' @param data Data frame processed by clean_ascent_csv() and evaluate_outliers()\n#' @param exclude_outliers defaults to TRUE. Will not include data in summary if data$Outlier is TRUE (as determined by IQR)\n#' @keywords ascent\n#' @export\n#' @examples\n#' summarize_QC(data)\n\nsummarize_QC <- function(data, exclude_outliers = TRUE) {\n\n  if(exclude_outliers) {\n    use_data <- data %>%\n      filter(!Outlier)\n  } else\n    use_data <- data\n\n  summaryTable <- use_data %>%\n  group_by(Analyte, Sample, Target) %>%\n  summarize(\"Mean\" = mean_round(Conc),\n            \"SD\" = sd_round(Conc),\n            \"%CV\" = cv_round(Conc),\n            \"%Dev\" = acc(Conc, Target),\n            \"n\" = n()) %>%\n  ungroup()\n\n  return(summaryTable)\n}\n\n\n#' Create Summary Table of Calibrator Verification Data\n#'\n#' Creates a summary table including Mean, SD, %CV, %Dev from Target, and n for each calibrator level for each analyte.\n#' @param data Data frame processed by clean_ascent_csv() and evaluate_outliers()\n#' @param exclude_outliers defaults to TRUE. Will not include data in summary if data$Outlier is TRUE (as determined by IQR)\n#' @keywords ascent\n#' @export\n#' @examples\n#' summarize_cals(data)\n\nsummarize_cals <- function(data, exclude_outliers = TRUE) {\n\n  if(exclude_outliers) {\n    use_data <- data %>%\n      filter(!Outlier)\n  } else\n    use_data <- data\n\n  summaryTable <- use_data %>%\n  group_by(Analyte, Sample, Target) %>%\n    summarize(\"Mean\" = mean_round(Conc),\n              \"SD\" = sd_round(Conc),\n              \"%CV\" = cv_round(Conc),\n              \"%Dev\" = acc(Conc, Target),\n              \"n\" = n()) %>%\n    ungroup()\n\n  return(summaryTable)\n}\n\n\n\n",
    "created" : 1503771173745.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4028420873",
    "id" : "46C95F90",
    "lastKnownWriteTime" : 1503756620,
    "last_content_update" : 1503756620,
    "path" : "~/ascent/ascent.R",
    "project_path" : "ascent.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}